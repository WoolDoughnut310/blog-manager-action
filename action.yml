name: "Blog Manager Action"
description: "A GitHub Action that uploads articles to your blogging platform"
inputs:
  medium_integration_token:
    description: "Medium's Integration Token. Token can be retrieved at medium.com/me/settings/security, under 'Integration tokens'"
    required: true
  hashnode_integration_token:
    description: "Hashnode's Integration Token. Token can be retrieved at hashnode.com/settings/developer"
    required: true
  github_token:
    description: "A GitHub PAT"
    required: true
  imgbb_api_key:
    description: "API Key for Imgbb CDN"
    required: true
outputs:
  hashnode_id:
    description: "ID of the Hashnode Post"
    value: ${{ steps.run-script.outputs.hashnode_id }}
  hashnode_url:
    description: "URL of the Hashnode Post"
    value: ${{ steps.run-script.outputs.hashnode_url }}
  medium_id:
    description: "ID of the Medium Post"
    value: ${{ steps.run-script.outputs.medium_id }}
  medium_url:
    description: "URL of the Medium Post"
    value: ${{ steps.run-script.outputs.medium_url }}
runs:
  using: "composite"
  steps:
    - name: Configures Auto-Commit message in environment
      run: echo "CI_COMMIT_MESSAGE=Apply output IDs to article files"
    - name: Set environment variable "is-auto-commit"
      if: github.event.commits[0].message == env.CI_COMMIT_MESSAGE && github.event.commits[0].author.name == env.CI_COMMIT_AUTHOR
      run: echo "is-auto-commit=true" >> $GITHUB_ENV
    - name: Display environment variable "is-auto-commit"
      run: echo "is-auto-commit=${{ env.is-auto-commit }}"
    - name: Install Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      shell: bash
    - name: Install project
      run: poetry install --no-interaction
      shell: bash

    - name: Pass Inputs to Shell
      run: |
        echo "MEDIUM_INTEGRATION_TOKEN=${{ inputs.medium_integration_token }}" >> $GITHUB_ENV
        echo "HASHNODE_INTEGRATION_TOKEN=${{ inputs.hashnode_integration_token }}" >> $GITHUB_ENV
        echo "IMGBB_API_KEY=${{ inputs.hashnode_integration_token }}" >> $GITHUB_ENV
        echo "GITHUB_TOKEN=${{ inputs.github_token }}" >> $GITHUB_ENV
        echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
        echo "GITHUB_SHA=${{ github.sha }}" >> $GITHUB_ENV
      shell: bash
    - name: Check Dirs
      run: ls
      shell: bash
    - name: run-script
      if: env.is-auto-commit == false
      run: |
        source .venv/bin/activate
        python blog_manager_action/main.py
      shell: bash
    - uses: stefanzweifel/git-auto-commit-action@v4
      if: env.is-auto-commit == false
      with:
        commit_message: env.CI_COMMIT_MESSAGE
        file_pattern: "**/article.md"
